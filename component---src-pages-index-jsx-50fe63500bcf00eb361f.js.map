{"version":3,"sources":["webpack:///./src/components/HomeTiles/HomeTiles.jsx","webpack:///./src/pages/index.jsx","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./src/components/SEO/SEO.jsx"],"names":["HomeTiles","getTiles","this","props","config","displayCategories","map","link","className","key","name","href","url","src","img","alt","render","Component","Index","title","siteTitle","SEO","React","normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","push","str","join","parts","split","arguments","slice","call","module","exports","definition","description","image","postURL","postNode","postPath","postSEO","postMeta","frontmatter","excerpt","feature","childImageSharp","fluid","urljoin","siteUrl","pathPrefix","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","alternateName","siteTitleAlt","itemListElement","position","item","headline","content","type","JSON","stringify","property","userTwitter"],"mappings":"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","file":"component---src-pages-index-jsx-50fe63500bcf00eb361f.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./HomeTiles.css\"\n\n\nclass HomeTiles extends Component {\n  getTiles () {\n    const { config: {displayCategories}} = this.props;\n    return displayCategories.map(link => (\n      <a className=\"tile\" key={link.name} href={link.url}>\n        <div className=\"tileImage\">\n          <div className=\"tileWrap\">\n            <img src={link.img} alt={link.name} />\n          </div>\n        </div>\n        <div className=\"tileOverlay\" />\n        <div className=\"tileText\">\n          <div className=\"tileTitle\">{link.name}</div>\n        </div>\n      </a>\n    ));\n  }\n\n  render() {\n    return (\n      <div className=\"homeTiles\">\n        {this.getTiles()}\n      </div>\n    );\n  }\n\n}\n\nexport default HomeTiles;","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { Link, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\nimport Layout from \"../layout\";\nimport SEO from \"../components/SEO/SEO\";\nimport config from \"../../data/SiteConfig\";\nimport HomeTiles from \"../components/HomeTiles/HomeTiles\";\n\nclass Index extends React.Component {\n  render() {\n    return (\n      <Layout>\n        <div className=\"index-container\">\n          <Helmet title={config.siteTitle} />\n          <SEO />\n          <HomeTiles config={config} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default Index;\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { frontmatter: { featured: { eq: true } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            image {\n              feature {\n                childImageSharp {\n                  fluid(\n                    maxWidth: 1800\n                    maxHeight: 1000\n                    cropFocus: ENTROPY\n                    quality: 90\n                  ) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.image.feature.childImageSharp.fluid.src;\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n\n    if (\n      !image.match(\n        `(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`\n      )\n    )\n      image = urljoin(config.siteUrl, config.pathPrefix, image);\n\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push(\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      );\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n"],"sourceRoot":""}